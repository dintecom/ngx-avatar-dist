import { Injectable } from '@angular/core';
import { AvatarSource } from './avatar-source.enum';
import { Custom } from './custom';
import { Facebook } from './facebook';
import { Github } from './github';
import { Google } from './google';
import { Gravatar } from './gravatar';
import { Initials } from './initials';
import { Instagram } from './instagram';
import { Skype } from './skype';
import { Twitter } from './twitter';
import { Value } from './value';
import { Vkontakte } from './vkontakte';
import * as i0 from "@angular/core";
/**
 * Factory class that implements factory method pattern.
 * Used to create Source implementation class based
 * on the source Type
 */
export class SourceFactory {
    constructor() {
        this.sources = {};
        this.sources[AvatarSource.FACEBOOK] = Facebook;
        this.sources[AvatarSource.TWITTER] = Twitter;
        this.sources[AvatarSource.GOOGLE] = Google;
        this.sources[AvatarSource.INSTAGRAM] = Instagram;
        this.sources[AvatarSource.SKYPE] = Skype;
        this.sources[AvatarSource.GRAVATAR] = Gravatar;
        this.sources[AvatarSource.CUSTOM] = Custom;
        this.sources[AvatarSource.INITIALS] = Initials;
        this.sources[AvatarSource.VALUE] = Value;
        this.sources[AvatarSource.VKONTAKTE] = Vkontakte;
        this.sources[AvatarSource.GITHUB] = Github;
    }
    newInstance(sourceType, sourceValue) {
        return new this.sources[sourceType](sourceValue);
    }
}
SourceFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: SourceFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
SourceFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: SourceFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: SourceFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtYXZhdGFyL3NyYy9saWIvc291cmNlcy9zb3VyY2UuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHaEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7O0FBRXhDOzs7O0dBSUc7QUFFSCxNQUFNLE9BQU8sYUFBYTtJQUd4QjtRQUZRLFlBQU8sR0FBcUMsRUFBRSxDQUFDO1FBR3JELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDN0MsQ0FBQztJQUVNLFdBQVcsQ0FBQyxVQUF3QixFQUFFLFdBQW1CO1FBQzlELE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7OzBHQW5CVSxhQUFhOzhHQUFiLGFBQWE7MkZBQWIsYUFBYTtrQkFEekIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF2YXRhclNvdXJjZSB9IGZyb20gJy4vYXZhdGFyLXNvdXJjZS5lbnVtJztcbmltcG9ydCB7IEN1c3RvbSB9IGZyb20gJy4vY3VzdG9tJztcbmltcG9ydCB7IEZhY2Vib29rIH0gZnJvbSAnLi9mYWNlYm9vayc7XG5pbXBvcnQgeyBHaXRodWIgfSBmcm9tICcuL2dpdGh1Yic7XG5pbXBvcnQgeyBHb29nbGUgfSBmcm9tICcuL2dvb2dsZSc7XG5pbXBvcnQgeyBHcmF2YXRhciB9IGZyb20gJy4vZ3JhdmF0YXInO1xuaW1wb3J0IHsgSW5pdGlhbHMgfSBmcm9tICcuL2luaXRpYWxzJztcbmltcG9ydCB7IEluc3RhZ3JhbSB9IGZyb20gJy4vaW5zdGFncmFtJztcbmltcG9ydCB7IFNreXBlIH0gZnJvbSAnLi9za3lwZSc7XG5pbXBvcnQgeyBTb3VyY2UgfSBmcm9tICcuL3NvdXJjZSc7XG5pbXBvcnQgeyBTb3VyY2VDcmVhdG9yIH0gZnJvbSAnLi9zb3VyY2UuY3JlYXRvcic7XG5pbXBvcnQgeyBUd2l0dGVyIH0gZnJvbSAnLi90d2l0dGVyJztcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSAnLi92YWx1ZSc7XG5pbXBvcnQgeyBWa29udGFrdGUgfSBmcm9tICcuL3Zrb250YWt0ZSc7XG5cbi8qKlxuICogRmFjdG9yeSBjbGFzcyB0aGF0IGltcGxlbWVudHMgZmFjdG9yeSBtZXRob2QgcGF0dGVybi5cbiAqIFVzZWQgdG8gY3JlYXRlIFNvdXJjZSBpbXBsZW1lbnRhdGlvbiBjbGFzcyBiYXNlZFxuICogb24gdGhlIHNvdXJjZSBUeXBlXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTb3VyY2VGYWN0b3J5IHtcbiAgcHJpdmF0ZSBzb3VyY2VzOiB7IFtrZXk6IHN0cmluZ106IFNvdXJjZUNyZWF0b3IgfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuRkFDRUJPT0tdID0gRmFjZWJvb2s7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5UV0lUVEVSXSA9IFR3aXR0ZXI7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5HT09HTEVdID0gR29vZ2xlO1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuSU5TVEFHUkFNXSA9IEluc3RhZ3JhbTtcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLlNLWVBFXSA9IFNreXBlO1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuR1JBVkFUQVJdID0gR3JhdmF0YXI7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5DVVNUT01dID0gQ3VzdG9tO1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuSU5JVElBTFNdID0gSW5pdGlhbHM7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5WQUxVRV0gPSBWYWx1ZTtcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLlZLT05UQUtURV0gPSBWa29udGFrdGU7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5HSVRIVUJdID0gR2l0aHViO1xuICB9XG5cbiAgcHVibGljIG5ld0luc3RhbmNlKHNvdXJjZVR5cGU6IEF2YXRhclNvdXJjZSwgc291cmNlVmFsdWU6IHN0cmluZyk6IFNvdXJjZSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLnNvdXJjZXNbc291cmNlVHlwZV0oc291cmNlVmFsdWUpO1xuICB9XG59XG4iXX0=