import { Injectable } from '@angular/core';
import { catchError, finalize, of, share, tap, throwError } from 'rxjs';
import { AvatarSource } from './sources/avatar-source.enum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./ngx-avatar-config.service";
/**
 * list of Supported avatar sources
 */
export const defaultSources = [
    AvatarSource.FACEBOOK,
    AvatarSource.GOOGLE,
    AvatarSource.TWITTER,
    AvatarSource.INSTAGRAM,
    AvatarSource.VKONTAKTE,
    AvatarSource.SKYPE,
    AvatarSource.GRAVATAR,
    AvatarSource.GITHUB,
    AvatarSource.CUSTOM,
    AvatarSource.INITIALS,
    AvatarSource.VALUE,
];
/**
 * list of default colors
 */
export const defaultColors = ['#1abc9c', '#3498db', '#f1c40f', '#8e44ad', '#e74c3c', '#d35400', '#2c3e50', '#7f8c8d'];
/**
 * Default request cache lifetime
 */
export const defaultCacheLifetimeSecond = 30 * 60;
/**
 * Provides utilities methods related to Avatar component
 */
export class NgxAvatarService {
    constructor(http, avatarConfigService) {
        this.http = http;
        this.avatarConfigService = avatarConfigService;
        this.avatarSources = defaultSources;
        this.avatarColors = defaultColors;
        this.cacheLifetimeSecond = defaultCacheLifetimeSecond;
        this.failedSources = new Map();
        this.cache = new Map();
        this.requestCache = new Map();
        this.overrideAvatarSources();
        this.overrideAvatarColors();
        this.overrideCacheLifetime();
    }
    fetchAvatar(avatarUrl) {
        const cached = this.cache.get(avatarUrl);
        if (cached) {
            return cached.error ? throwError(() => cached.error) : of(cached.data);
        }
        let request = this.requestCache.get(avatarUrl);
        if (request)
            return request;
        request = this.http.get(avatarUrl).pipe(tap(r => {
            this.requestCache.delete(avatarUrl);
            this.cache.set(avatarUrl, { data: r });
        }), catchError(e => {
            this.requestCache.delete(avatarUrl);
            this.cache.set(avatarUrl, { error: e });
            return throwError(() => e);
        }), finalize(() => {
            setTimeout(() => this.cache.delete(avatarUrl), this.cacheLifetimeSecond * 1000);
        }), share());
        this.requestCache.set(avatarUrl, request);
        return request;
    }
    getRandomColor(avatarText) {
        if (!avatarText) {
            return 'transparent';
        }
        const asciiCodeSum = this.calculateAsciiCode(avatarText);
        return this.avatarColors[asciiCodeSum % this.avatarColors.length];
    }
    compareSources(sourceType1, sourceType2) {
        return this.getSourcePriority(sourceType1) - this.getSourcePriority(sourceType2);
    }
    isSource(source) {
        return this.avatarSources.includes(source);
    }
    isTextAvatar(sourceType) {
        return [AvatarSource.INITIALS, AvatarSource.VALUE].includes(sourceType);
    }
    buildSourceKey(source) {
        return source.sourceType + '-' + source.sourceId;
    }
    sourceHasFailedBefore(source) {
        return this.failedSources.has(this.buildSourceKey(source));
    }
    markSourceAsFailed(source) {
        this.failedSources.set(this.buildSourceKey(source), source);
    }
    overrideAvatarSources() {
        this.avatarSources = this.avatarConfigService.getAvatarSources(defaultSources);
    }
    overrideAvatarColors() {
        this.avatarColors = this.avatarConfigService.getAvatarColors(defaultColors);
    }
    overrideCacheLifetime() {
        this.cacheLifetimeSecond = this.avatarConfigService.getCacheLifetime(defaultCacheLifetimeSecond);
    }
    calculateAsciiCode(value) {
        return value
            .split('')
            .map(letter => letter.charCodeAt(0))
            .reduce((previous, current) => previous + current);
    }
    getSourcePriority(sourceType) {
        return this.avatarSources.indexOf(sourceType);
    }
}
NgxAvatarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: NgxAvatarService, deps: [{ token: i1.HttpClient }, { token: i2.NgxAvatarConfigService }], target: i0.ɵɵFactoryTarget.Injectable });
NgxAvatarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: NgxAvatarService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: NgxAvatarService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.NgxAvatarConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,